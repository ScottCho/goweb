// Code generated by goctl. DO NOT EDIT.
// Source: keystone.proto

package keystoneclient

import (
	"context"

	"github.com/ScottCho/goweb/apps/keystone/rpc/pb/keystone"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	LoginRequest     = keystone.LoginRequest
	LoginResponse    = keystone.LoginResponse
	RegisterRequest  = keystone.RegisterRequest
	RegisterResponse = keystone.RegisterResponse
	UserInfoRequest  = keystone.UserInfoRequest
	UserInfoResponse = keystone.UserInfoResponse

	Keystone interface {
		Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
		Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
		UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error)
	}

	defaultKeystone struct {
		cli zrpc.Client
	}
)

func NewKeystone(cli zrpc.Client) Keystone {
	return &defaultKeystone{
		cli: cli,
	}
}

func (m *defaultKeystone) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	client := keystone.NewKeystoneClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultKeystone) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	client := keystone.NewKeystoneClient(m.cli.Conn())
	return client.Register(ctx, in, opts...)
}

func (m *defaultKeystone) UserInfo(ctx context.Context, in *UserInfoRequest, opts ...grpc.CallOption) (*UserInfoResponse, error) {
	client := keystone.NewKeystoneClient(m.cli.Conn())
	return client.UserInfo(ctx, in, opts...)
}
